generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model MasterRole {
  id         String   @id @default(uuid())
  title      String
  status     Boolean  @default(true)
  is_deleted Boolean  @default(false)
  created_at DateTime @default(now()) @db.Timestamptz()
  updated_at DateTime @default(now()) @db.Timestamptz()
  users      User[]

  @@map("master_roles")
}

model User {
  id                String              @id @default(uuid())
  first_name        String?
  last_name         String?
  email             String
  country           String
  mobile_no         String?
  password          String
  is_verified       Boolean             @default(false)
  role_id           String
  status            Boolean             @default(true)
  is_deleted        Boolean             @default(false)
  created_at        DateTime            @default(now()) @db.Timestamptz()
  updated_at        DateTime            @default(now()) @db.Timestamptz()
  roles             MasterRole          @relation(fields: [role_id], references: [id])
  userPersistent    UserPersistent[]
  TermsAndCondition TermsAndCondition[]
  medias            Media[]
  products          Products[]
  auctions          Auctions[]
  user_otp          UserOTP[]

  @@unique([email])
  @@index([email])
  @@map("users")
}

model UserOTP {
  id             String   @id @default(uuid())
  otp            Int      @db.Integer
  expiry_seconds BigInt?   @db.BigInt
  otp_type       String
  created_at     DateTime @default(now()) @db.Timestamptz()
  user_id        String
  users          User     @relation(fields: [user_id], references: [id])

  @@index([otp])
  @@map("user_otp")
}

model UserPersistent {
  id            String   @id @default(uuid())
  public_key    String   @db.Text
  access_token  String   @db.Text
  refresh_token String   @db.Text
  ip_address    String
  user_agent    String
  user_id       String
  created_at    DateTime @default(now()) @db.Timestamptz()
  updated_at    DateTime @default(now()) @db.Timestamptz()
  users         User     @relation(fields: [user_id], references: [id])

  @@index([public_key, access_token])
  @@map("user_persistent")
}

model TermsAndCondition {
  id         String   @id @default(uuid())
  title      String
  content    String   @db.Text
  status     Boolean  @default(true)
  is_deleted Boolean  @default(false)
  created_at DateTime @default(now()) @db.Timestamptz()
  updated_at DateTime @default(now()) @db.Timestamptz()
  created_by String
  users      User     @relation(fields: [created_by], references: [id])

  @@index([title, content])
  @@map("terms_conditions")
}

model Media {
  id            String         @id @default(uuid())
  filename      String
  size          BigInt
  type          String
  local_path    String
  tag           String
  mime_type     String
  status        Boolean        @default(true)
  is_deleted    Boolean        @default(false)
  created_at    DateTime       @default(now()) @db.Timestamptz()
  updated_at    DateTime       @default(now()) @db.Timestamptz()
  created_by    String
  users         User           @relation(fields: [created_by], references: [id])
  productMedias ProductMedia[]
  auctionMedias AuctionMedia[]

  @@index([filename, type])
  @@map("media")
}

model MasterProductCategory {
  id         String     @id @default(uuid())
  title      String
  status     Boolean    @default(true)
  is_deleted Boolean    @default(false)
  created_at DateTime   @default(now()) @db.Timestamptz()
  updated_at DateTime   @default(now()) @db.Timestamptz()
  products   Products[]

  @@index([title])
  @@map("master_product_categories")
}

model Products {
  id                  String                @id @default(uuid())
  title               String
  description         String                @db.Text
  status              Boolean               @default(true)
  is_deleted          Boolean               @default(false)
  created_at          DateTime              @default(now()) @db.Timestamptz()
  updated_at          DateTime              @default(now()) @db.Timestamptz()
  product_category_id String
  created_by          String
  users               User                  @relation(fields: [created_by], references: [id])
  productCategories   MasterProductCategory @relation(fields: [product_category_id], references: [id])
  auctions            Auctions[]
  productMedias       ProductMedia[]

  @@index([title])
  @@map("products")
}

model ProductMedia {
  id         String   @id @default(uuid())
  product_id String
  media_id   String
  status     Boolean  @default(true)
  is_deleted Boolean  @default(false)
  created_at DateTime @default(now()) @db.Timestamptz()
  updated_at DateTime @default(now()) @db.Timestamptz()
  products   Products @relation(fields: [product_id], references: [id])
  medias     Media    @relation(fields: [media_id], references: [id])

  @@map("product_media")
}

model MasterAuctionCategory {
  id         String     @id @default(uuid())
  title      String
  status     Boolean    @default(true)
  is_deleted Boolean    @default(false)
  created_at DateTime   @default(now()) @db.Timestamptz()
  updated_at DateTime   @default(now()) @db.Timestamptz()
  auctions   Auctions[]

  @@index([title])
  @@map("master_auction_categories")
}

model Auctions {
  id                     String                @id @default(uuid())
  title                  String
  description            String                @db.Text
  image_path             String
  video_path             String
  bid_increment_price    Float
  plays_consumed_on_bid  Int
  opening_price          Float
  new_participants_limit Int?
  start_date             DateTime              @db.Date
  registeration_count    BigInt
  registeration_fees     Int
  terms_and_conditions   String?               @db.Text
  status                 Boolean               @default(true)
  is_deleted             Boolean               @default(false)
  created_at             DateTime              @default(now()) @db.Timestamptz()
  updated_at             DateTime              @default(now()) @db.Timestamptz()
  auction_category_id    String
  product_id             String
  created_by             String
  users                  User                  @relation(fields: [created_by], references: [id])
  auctionCategory        MasterAuctionCategory @relation(fields: [auction_category_id], references: [id])
  products               Products              @relation(fields: [product_id], references: [id])
  auctionMedia           AuctionMedia[]

  @@index([title])
  @@map("auctions")
}

model AuctionMedia {
  id         String   @id @default(uuid())
  auction_id String
  media_id   String
  status     Boolean  @default(true)
  is_deleted Boolean  @default(false)
  created_at DateTime @default(now()) @db.Timestamptz()
  updated_at DateTime @default(now()) @db.Timestamptz()
  auctions   Auctions @relation(fields: [auction_id], references: [id])
  medias     Media    @relation(fields: [media_id], references: [id])

  @@index([auction_id, media_id])
  @@map("auction_media")
}

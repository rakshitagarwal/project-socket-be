generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model MasterRole {
  id         String   @id @default(uuid())
  title      String
  status     Boolean  @default(true)
  is_deleted Boolean  @default(false)
  created_at DateTime @default(now()) @db.Timestamptz()
  updated_at DateTime @default(now()) @db.Timestamptz()
  users      User[]

  @@map("master_roles")
}

model User {
  id          String     @id @default(uuid())
  first_name  String?
  last_name   String?
  email       String
  country     String
  mobile_no   String?
  password    String?
  avatar      String?
  is_verified Boolean    @default(false)
  role_id     String
  status      Boolean    @default(true)
  is_deleted  Boolean    @default(false)
  created_at  DateTime   @default(now()) @db.Timestamptz()
  updated_at  DateTime   @default(now()) @db.Timestamptz()
  roles       MasterRole @relation(fields: [role_id], references: [id])
  countries   Countries  @relation(fields: [country], references: [name])

  userPersistent          UserPersistent[]
  TermsAndCondition       TermsAndCondition[]
  medias                  Media[]
  products                Products[]
  auctions                Auctions[]
  user_otp                UserOTP[]
  CurrencyTransaction     CurrencyTransaction[]
  PlayerWalletTransaction PlayerWalletTransaction[]
  PlayerAuctionRegister   PlayerAuctionRegister[]
  PlayerBidLogs           PlayerBidLogs[]
  PlayerAuctionRefund     PlayerAuctionRefund[]
  AuctionWinner           AuctionWinner[]
  BidBot                  BidBot[]

  @@unique([email])
  @@index([email])
  @@map("users")
}

model UserOTP {
  id             String   @id @default(uuid())
  otp            Int      @db.Integer
  expiry_seconds BigInt?  @db.BigInt
  otp_type       String
  created_at     DateTime @default(now()) @db.Timestamptz()
  user_id        String
  users          User     @relation(fields: [user_id], references: [id])

  @@index([otp])
  @@map("user_otp")
}

model UserPersistent {
  id            String   @id @default(uuid())
  public_key    String   @db.Text
  access_token  String   @db.Text
  refresh_token String   @db.Text
  ip_address    String
  user_agent    String
  user_id       String
  created_at    DateTime @default(now()) @db.Timestamptz()
  updated_at    DateTime @default(now()) @db.Timestamptz()
  users         User     @relation(fields: [user_id], references: [id])

  @@index([public_key, access_token])
  @@map("user_persistent")
}

model TermsAndCondition {
  id         String   @id @default(uuid())
  content    String   @db.Text
  status     Boolean  @default(true)
  is_deleted Boolean  @default(false)
  created_at DateTime @default(now()) @db.Timestamptz()
  updated_at DateTime @default(now()) @db.Timestamptz()
  created_by String
  users      User     @relation(fields: [created_by], references: [id])

  @@index([content])
  @@map("terms_conditions")
}

model Media {
  id            String         @id
  filename      String
  size          Int
  type          String
  local_path    String
  tag           String
  mime_type     String
  status        Boolean        @default(true)
  is_deleted    Boolean        @default(false)
  created_at    DateTime       @default(now()) @db.Timestamptz()
  updated_at    DateTime       @default(now()) @db.Timestamptz()
  created_by    String
  users         User           @relation(fields: [created_by], references: [id])
  productMedias ProductMedia[]
  Products      Products[]

  @@index([filename, type])
  @@map("media")
}

model MasterProductCategory {
  id         String     @id @default(uuid())
  title      String
  status     Boolean    @default(true)
  is_deleted Boolean    @default(false)
  created_at DateTime   @default(now()) @db.Timestamptz()
  updated_at DateTime   @default(now()) @db.Timestamptz()
  products   Products[]

  @@index([title])
  @@map("master_product_categories")
}

model Products {
  id                  String                @id @default(uuid())
  title               String
  description         String                @db.Text
  landing_image       String
  price               Int
  status              Boolean               @default(true)
  is_deleted          Boolean               @default(false)
  created_at          DateTime              @default(now()) @db.Timestamptz()
  updated_at          DateTime              @default(now()) @db.Timestamptz()
  product_category_id String
  created_by          String
  users               User                  @relation(fields: [created_by], references: [id])
  productCategories   MasterProductCategory @relation(fields: [product_category_id], references: [id])
  medias              Media                 @relation(fields: [landing_image], references: [id], onDelete: Cascade)

  auctions      Auctions[]
  productMedias ProductMedia[]

  @@index([title, landing_image])
  @@map("products")
}

model ProductMedia {
  id         String   @id @default(uuid())
  product_id String
  media_id   String
  status     Boolean  @default(true)
  is_deleted Boolean  @default(false)
  created_at DateTime @default(now()) @db.Timestamptz()
  updated_at DateTime @default(now()) @db.Timestamptz()
  products   Products @relation(fields: [product_id], references: [id], onDelete: Cascade)
  medias     Media    @relation(fields: [media_id], references: [id], onDelete: Cascade)

  @@map("product_media")
}

model MasterAuctionCategory {
  id         String     @id @default(uuid())
  title      String
  status     Boolean    @default(true)
  is_deleted Boolean    @default(false)
  created_at DateTime   @default(now()) @db.Timestamptz()
  updated_at DateTime   @default(now()) @db.Timestamptz()
  auctions   Auctions[]

  @@index([title])
  @@map("master_auction_categories")
}

model Auctions {
  id                                  String                    @id @default(uuid())
  title                               String
  description                         String                    @db.Text
  bid_increment_price                 Float                     @default(0.01)
  plays_consumed_on_bid               Int
  opening_price                       Float                     @default(1.00)
  new_participants_limit              Int?
  start_date                          DateTime?                 @db.Timestamptz()
  is_preRegistered                    Boolean                   @default(false)
  registeration_count                 Int?
  registeration_fees                  Int?
  registeration_endDate               DateTime?                 @db.Timestamptz()
  auction_pre_registeration_startDate DateTime?                 @db.Timestamptz()
  terms_and_conditions                String?                   @db.Text
  state                               String                    @db.Text
  status                              Boolean                   @default(true)
  is_deleted                          Boolean                   @default(false)
  created_at                          DateTime                  @default(now()) @db.Timestamptz()
  updated_at                          DateTime                  @default(now()) @db.Timestamptz()
  auction_category_id                 String
  product_id                          String
  created_by                          String
  users                               User                      @relation(fields: [created_by], references: [id])
  auctionCategory                     MasterAuctionCategory     @relation(fields: [auction_category_id], references: [id])
  products                            Products                  @relation(fields: [product_id], references: [id])
  PlayerWalletTransaction             PlayerWalletTransaction[]
  PlayerAuctionRegister               PlayerAuctionRegister[]
  PlayerBidLogs                       PlayerBidLogs[]
  PlayerAuctionRefund                 PlayerAuctionRefund[]
  AuctionWinner                       AuctionWinner[]
  BidBot                              BidBot[]

  @@index([title])
  @@map("auctions")
}

model Countries {
  id         String   @id @default(uuid())
  name       String
  code       String
  isd_code   String?
  created_at DateTime @default(now()) @db.Timestamptz()
  User       User[]

  @@unique([name])
  @@map("countries")
}

model CurrencyTransaction {
  id                       String                    @id @default(uuid())
  credit_amount            Float
  currency                 Currency
  currency_type            currencyType
  crypto_transacation_hash String?                   @db.Text
  payment_gateway_id       String?
  created_at               DateTime                  @default(now()) @db.Timestamptz()
  created_by               String
  User                     User                      @relation(fields: [created_by], references: [id])
  PlayerWalletTransaction  PlayerWalletTransaction[]

  @@map("currency_transaction")
}

model PlayerWalletTransaction {
  id                      String                  @id @default(uuid())
  play_debit              Int?
  play_credit             Int?
  spend_on                PlaySpend
  status                  Boolean                 @default(true)
  is_deleted              Boolean                 @default(false)
  created_at              DateTime                @default(now()) @db.Timestamptz()
  currency_transaction_id String?
  plays_refund_id         String?
  created_by              String
  auction_id              String?
  PlayerAuctionRefund     PlayerAuctionRefund?    @relation(fields: [plays_refund_id], references: [id])
  Auctions                Auctions?               @relation(fields: [auction_id], references: [id])
  User                    User                    @relation(fields: [created_by], references: [id])
  CurrencyTransaction     CurrencyTransaction?    @relation(fields: [currency_transaction_id], references: [id])
  PlayerAuctionRegisters  PlayerAuctionRegister[]

  @@map("player_wallet_transaction")
}

model PlayerAuctionRegister {
  id                           String                   @id @default(uuid())
  auction_id                   String
  player_wallet_transaction_id String?
  player_id                    String
  created_at                   DateTime                 @default(now()) @db.Timestamptz()
  Auctions                     Auctions?                @relation(fields: [auction_id], references: [id])
  User                         User                     @relation(fields: [player_id], references: [id])
  PlayerWalletTransaction      PlayerWalletTransaction? @relation(fields: [player_wallet_transaction_id], references: [id])

  @@map("player_auction_register")
}

model PlayerBidLogs {
  id                String          @id @default(uuid())
  bid_price         Float
  bid_number        Int
  remaining_seconds Int
  created_at        DateTime        @default(now()) @db.Timestamptz()
  player_id         String
  player_name       String
  profile_image     String
  player_bot_id     String?
  auction_id        String
  BidBot            BidBot?         @relation(fields: [player_bot_id], references: [id])
  User              User            @relation(fields: [player_id], references: [id])
  Auction           Auctions        @relation(fields: [auction_id], references: [id])
  AuctionWinner     AuctionWinner[]

  @@map("player_bid_log")
}

model PlayerAuctionRefund {
  id                      String                    @id @default(uuid())
  refund_amount           Float
  reason                  String                    @db.Text
  created_at              DateTime                  @default(now()) @db.Timestamptz()
  auction_id              String
  player_id               String
  User                    User                      @relation(fields: [player_id], references: [id])
  Auction                 Auctions                  @relation(fields: [auction_id], references: [id])
  PlayerWalletTransaction PlayerWalletTransaction[]

  @@map("player_auction_refund")
}

model AuctionWinner {
  id                String         @id @default(uuid())
  auction_id        String
  player_id         String
  player_bid_log_id String?
  total_bids        Int
  created_at        DateTime       @default(now()) @db.Timestamptz()
  Auction           Auctions       @relation(fields: [auction_id], references: [id])
  User              User           @relation(fields: [player_id], references: [id])
  PlayerBidLog      PlayerBidLogs? @relation(fields: [player_bid_log_id], references: [id])

  @@map("auction_winner")
}

model BidBot {
  id            String          @id @default(uuid())
  player_id     String
  auction_id    String
  bid_limit     Int
  total_bot_bid Int
  is_active     Boolean         @default(false)
  created_at    DateTime        @default(now()) @db.Timestamptz()
  PlayerBidLogs PlayerBidLogs[]
  Auction       Auctions        @relation(fields: [auction_id], references: [id])
  User          User            @relation(fields: [player_id], references: [id])

  @@map("bid_bot")
}

enum Currency {
  INR
  USD
}

enum currencyType {
  USDTERC20
  USDTRC20
  BIGTOKEN
}

enum PlaySpend {
  BUY_PLAYS
  REFUND_PLAYS
  BID_PLAYS
}
